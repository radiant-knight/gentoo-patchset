--- a/pppd/Makefile.linux
+++ b/pppd/Makefile.linux
@@ -155,7 +155,7 @@
 
 ifdef NEEDDES
 ifndef USE_CRYPT
-CFLAGS   += -I$(shell $(CC) --print-sysroot)/usr/include/openssl
+CFLAGS   += -I/usr/include/openssl
 NEEDCRYPTOLIB = y
 else
 CFLAGS   += -DUSE_CRYPT=1
--- a/pppd/eap-tls.c
+++ b/pppd/eap-tls.c
@@ -278,7 +278,15 @@
     return e;
 }
 
+static int _transfer_pin_writer (UI *ui, UI_STRING *uis)
+{
+	PW_CB_DATA* cb_data = (PW_CB_DATA*)UI_get0_user_data(ui);
+        UI_set_result(ui, uis, cb_data->password);
+        return 1;
+};
 
+static int _transfer_pin_stub (UI* ui) {return 1;};
+static int _transfer_pin_stub_reader (UI *ui, UI_STRING *uis) {return 1;};
 
 /*
  * Initialize the SSL stacks and tests if certificates, key and crl
@@ -516,20 +524,11 @@
         {
             UI_METHOD* transfer_pin = UI_create_method("transfer_pin");
 
-            int writer (UI *ui, UI_STRING *uis)
-            {
-                PW_CB_DATA* cb_data = (PW_CB_DATA*)UI_get0_user_data(ui);
-                UI_set_result(ui, uis, cb_data->password);
-                return 1;
-            };
-            int stub (UI* ui) {return 1;};
-            int stub_reader (UI *ui, UI_STRING *uis) {return 1;};
-
-            UI_method_set_writer(transfer_pin,  writer);
-            UI_method_set_opener(transfer_pin,  stub);
-            UI_method_set_closer(transfer_pin,  stub);
-            UI_method_set_flusher(transfer_pin, stub);
-            UI_method_set_reader(transfer_pin,  stub_reader);
+            UI_method_set_writer(transfer_pin,  _transfer_pin_writer);
+            UI_method_set_opener(transfer_pin,  _transfer_pin_stub);
+            UI_method_set_closer(transfer_pin,  _transfer_pin_stub);
+            UI_method_set_flusher(transfer_pin, _transfer_pin_stub);
+            UI_method_set_reader(transfer_pin,  _transfer_pin_stub_reader);
 
             dbglog( "Using our private key '%s' in engine", pkey_identifier );
             pkey = ENGINE_load_private_key(pkey_engine, pkey_identifier, transfer_pin, &cb_data);
